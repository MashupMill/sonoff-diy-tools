{"version":3,"sources":["react/DeviceApi.js","react/components/WifiSaveConfirmDialog.jsx","react/components/WifiSettings.jsx","react/components/DeviceConfiguration.jsx","react/components/DeviceResult.jsx","react/App.jsx","index.jsx","electron/constants.js"],"names":["ipcRenderer","window","ON_OFF","STARTUP_OPTS","isBlank","value","trim","length","DeviceApi","id","addresses","port","Error","this","url","data","Promise","resolve","reject","once","channels","DEVICE_API","event","args","error","JSON","parse","send","deviceid","doRequest","turnOn","switch","startup","indexOf","join","pulse","pulseWidth","ssid","password","WifiSaveConfirmDialog","isOpen","onClose","onSave","primaryAction","useRef","icon","title","onOpened","console","log","current","className","Classes","DIALOG_BODY","RUNNING_TEXT","intent","Intent","WARNING","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","onClick","elementRef","PRIMARY","StyledInputGroup","styled","InputGroup","SaveActions","div","WifiSettings","initialSsid","deviceApi","useState","isEditing","setEditing","showPassword","setShowPassword","showConfirm","setShowConfirm","setSsid","setPassword","handleSubmit","e","preventDefault","onSubmit","label","autoFocus","placeholder","onChange","target","leftIcon","type","rightElement","minimal","small","disabled","setWifi","StyledContainer","Callout","FORM_GROUP","LABEL","DIVIDER","DeviceConfiguration","settings","setPulseWidth","checked","min","max","stepSize","minorStepSize","majorStepSize","onValueChange","StyledCard","Card","CardHeader","CardHeaderGroup","DeviceResult","device","showSettings","setShowSettings","setSettings","txt","loadSettings","getInfo","then","useEffect","handleConfigChange","a","saves","push","setPowerOnState","setInching","all","elevation","Elevation","ZERO","name","innerLabel","innerLabelChecked","undefined","App","state","appName","appVersion","nodeVersion","chromeVersion","electronVersion","devices","APP_INFO","arg","setState","on","DEVICE_RESPONSE","stringify","fqdn","SCAN_DEVICES","Object","values","Group","align","Alignment","LEFT","Heading","RIGHT","map","key","description","Component","ReactDOM","render","document","getElementById","module","exports","DEVICE_API_ERROR"],"mappings":"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","file":"static/js/main.82dc673d.chunk.js","sourcesContent":["import { channels } from '../electron/constants';\nconst { ipcRenderer } = window;\n\nconst ON_OFF = ['on', 'off']\nconst STARTUP_OPTS = [...ON_OFF, 'stay'];\n\nfunction isBlank(value) {\n    return !(typeof value === 'string' && value.trim().length > 0);\n}\n\nexport default class DeviceApi {\n    constructor({ id, addresses = [], port = 8081 }) {\n        if (!id) throw new Error('Device id must not be blank');\n        if (!addresses || addresses.length < 1) throw new Error('Device must have an address');\n        this.id = id;\n        this.addresses = addresses;\n        this.url = `http://${this.addresses[0]}:${port}`;\n    }\n\n    doRequest(url, data) {\n        return new Promise((resolve, reject) => {\n            ipcRenderer.once(channels.DEVICE_API, (event, args) => {\n                if (args && args.error === 0) {\n                    resolve(typeof args.data === 'string' ? JSON.parse(args.data) : args.data)\n                } else {\n                    reject(args);\n                }\n            });\n            ipcRenderer.send(channels.DEVICE_API, { url, data });\n        });\n    }\n\n    async getInfo() {\n        const url = `${this.url}/zeroconf/info`;\n        const data = { deviceid: this.id, data: {} };\n        return await this.doRequest(url, data);\n    }\n\n    async switch(turnOn) {\n        const url = `${this.url}/zeroconf/switch`;\n        const data = { deviceid: this.id, data: { switch: turnOn ? 'on' : 'off' } };\n        return await this.doRequest(url, data);\n    }\n\n    async setPowerOnState(startup) {\n        if (STARTUP_OPTS.indexOf(startup) < 0) {\n            throw new Error(`Invalid power on state value \"${startup}\". Must be one of ${STARTUP_OPTS.join(', ')}`)\n        }\n        const url = `${this.url}/zeroconf/startup`;\n        const data = { deviceid: this.id, data: { startup } };\n        return await this.doRequest(url, data);\n    }\n\n    async getSignalStrength() {\n        const url = `${this.url}/zeroconf/signal_strength`;\n        const data = { deviceid: this.id, data: {} };\n        return await this.doRequest(url, data);\n    }\n\n    async setInching({ pulse, pulseWidth }) {\n        if (ON_OFF.indexOf(pulse) < 0) {\n            throw new Error(`Invalid pulse value \"${pulse}\". Must be one of ${ON_OFF.join(', ')}`)\n        }\n        if (typeof pulseWidth !== 'number' || pulseWidth < 500 || pulseWidth > 36000000 || pulseWidth % 500 !== 0) {\n            throw new Error(`Invalud pulseWidth value \"${pulseWidth}\". Must be a number that is a multiple of 500 between 500 and 36000000`);\n        }\n        const url = `${this.url}/zeroconf/pulse`;\n        const data = { deviceid: this.id, data: { pulse, pulseWidth } };\n        return await this.doRequest(url, data);\n    }\n\n    async setWifi({ ssid, password }) {\n        if (isBlank(ssid)) {\n            throw new Error(`Invalud ssid value \"${ssid}\". Must not be blank`);\n        }\n        if (isBlank(password)) {\n            throw new Error(`Invalud password value \"${password}\". Must not be blank`);\n        }\n        const url = `${this.url}/zeroconf/wifi`;\n        const data = { deviceid: this.id, data: { ssid, password } };\n        return await this.doRequest(url, data);\n    }\n\n    async setOtaUnlock() {\n        const url = `${this.url}/zeroconf/ota_unlock`;\n        const data = { deviceid: this.id, data: {} };\n        return await this.doRequest(url, data);\n    }\n}\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Intent, Dialog, H5, Classes, Callout } from '@blueprintjs/core';\n\nexport default function WifiSaveConfirmDialog({ ssid, password, isOpen, onClose, onSave }) {\n    const primaryAction = useRef();\n    return (\n        <Dialog icon=\"warning-sign\"\n                isOpen={isOpen}\n                onClose={onClose}\n                title=\"Please double check!\"\n                onOpened={() => console.log(primaryAction.current)}>\n            <div className={`${Classes.DIALOG_BODY} ${Classes.RUNNING_TEXT}`}>\n                <Callout intent={Intent.WARNING}>\n                    Please double check these settings are correct!\n                    Once these are saved, the device will disconnect from the\n                    current wifi network and attempt to connect to the network\n                    shown here.\n                </Callout>\n                <H5>\n                    <p>SSID: <code>{ssid}</code></p>\n                    <p>Password: <code>{password}</code></p>\n                </H5>\n            </div>\n            <div className={Classes.DIALOG_FOOTER}>\n                <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                    <Button onClick={onClose}>Cancel</Button>\n                    <Button elementRef={primaryAction} intent={Intent.PRIMARY} onClick={onSave}>Save Wifi Settings</Button>\n                </div>\n            </div>\n        </Dialog>\n    )\n}\n\nWifiSaveConfirmDialog.propTypes = {\n    ssid: PropTypes.string,\n    password: PropTypes.string,\n    isOpen: PropTypes.bool,\n    onClose: PropTypes.func,\n    onSave: PropTypes.func,\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Icon, Button, Intent, InputGroup, Classes, FormGroup } from '@blueprintjs/core';\nimport WifiSaveConfirmDialog from './WifiSaveConfirmDialog';\n\nconst StyledInputGroup = styled(InputGroup)`\n    &:not(:last-child) {\n        margin-bottom: 5px;\n    }\n`;\n\nconst SaveActions = styled.div`\n    margin-bottom: 15px;\n`;\n\nexport default function WifiSettings({ initialSsid, deviceApi }) {\n    const [isEditing, setEditing] = useState(false);\n    const [showPassword, setShowPassword] = useState(true);\n    const [showConfirm, setShowConfirm] = useState(false);\n    const [ssid, setSsid] = useState(initialSsid);\n    const [password, setPassword] = useState('');\n\n    if (!ssid && initialSsid) {\n        setSsid(initialSsid);\n    }\n\n    if (!ssid) return null;\n\n    const handleSubmit = (e) => {\n        console.log('submit');\n        e.preventDefault();\n        setShowConfirm(true);\n        return false;\n    }\n\n    const handleCancel = () => {\n        setEditing(false);\n        setSsid(initialSsid);\n        setPassword('');\n    }\n\n    const handleSave = () => {\n        deviceApi.setWifi({ ssid, password });\n        setEditing(false);\n        setShowConfirm(false);\n    }\n\n    if (!isEditing) {\n        return (\n            <FormGroup label=\"Wifi Network\">\n                {ssid} <Button minimal onClick={() => setEditing(true)}><Icon icon=\"edit\" /></Button>\n            </FormGroup>\n        )\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <FormGroup label=\"Wifi Network\">\n                <StyledInputGroup autoFocus\n                                  placeholder=\"SSID\"\n                                  value={ssid}\n                                  onChange={e => setSsid(`${e.target.value || ''}`.trim())}\n                />\n                <StyledInputGroup leftIcon=\"lock\"\n                                  type={showPassword ? 'text' : 'password'}\n                                  placeholder=\"Password\"\n                                  rightElement={<Button onClick={() => setShowPassword(!showPassword)} minimal><Icon icon={showPassword ? 'eye-open' : 'eye-off'} /></Button>}\n                                  value={password}\n                                  onChange={e => setPassword(`${e.target.value || ''}`.trim())}\n                />\n            </FormGroup>\n\n            <SaveActions className={Classes.DIALOG_FOOTER_ACTIONS}>\n                <Button small onClick={handleCancel}>Cancel</Button>\n                <Button small disabled={!password} intent={Intent.PRIMARY} type=\"submit\" onClick={handleSubmit}>Save</Button>\n            </SaveActions>\n\n            <WifiSaveConfirmDialog ssid={ssid}\n                                   password={password}\n                                   isOpen={showConfirm}\n                                   onClose={() => setShowConfirm(false)}\n                                   onSave={handleSave} />\n        </form>\n    )\n}\n\nWifiSettings.propTypes = {\n    initialSsid: PropTypes.string,\n    deviceApi: PropTypes.object,\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, Label, Switch, HTMLSelect as Select, NumericInput, Classes, Divider, H6, Callout } from '@blueprintjs/core';\nimport styled from 'styled-components';\nimport WifiSettings from './WifiSettings';\n\nconst PULSE_WIDTH_MIN = 500;\nconst PULSE_WIDTH_MAX = 36000000;\nconst PULSE_WIDTH_STEP = 500;\n\nconst StyledContainer = styled(Callout)`\n    margin-top: 1em;\n\n    .${Classes.FORM_GROUP} > .${Classes.LABEL} {\n        font-weight: bold;\n    }\n\n    .${Classes.DIVIDER} {\n        margin-left: 0;\n        margin-right: 0;\n    }\n`\n\nexport default function DeviceConfiguration({ settings = {}, onChange, deviceApi }) {\n    const [pulseWidth, setPulseWidth] = useState(settings.pulseWidth);\n    // if (settings.pulseWidth && settings.pulseWidth != pulseWidth) {\n    //     setPulseWidth(settings.pulseWidth);\n    // }\n    return (\n        <StyledContainer>\n            <H6>Device Configuration</H6>\n            <Divider />\n            <WifiSettings initialSsid={settings.ssid} deviceApi={deviceApi} />\n\n            <FormGroup label=\"Power On State\">\n                <Select value={settings.startup} onChange={e => onChange({ ...settings, startup: e.target.value })}>\n                    <option value=\"off\">Off</option>\n                    <option value=\"on\">On</option>\n                    <option value=\"stay\">Stay</option>\n                </Select>\n            </FormGroup>\n\n            <FormGroup label=\"Pulse / Inching Settings\">\n                <Label>\n                    <Switch label=\"Enabled\" checked={settings.pulse === 'on'} onChange={(e) => onChange({ ...settings, pulse: e.target.checked ? 'on' : 'off' })} />\n                </Label>\n                <Label>\n                    Pulse Width (milliseconds)\n                <NumericInput value={pulseWidth}\n                              leftIcon=\"time\"\n                              min={PULSE_WIDTH_MIN}\n                              max={PULSE_WIDTH_MAX}\n                              stepSize={500}\n                              minorStepSize={500}\n                              majorStepSize={10000}\n                              onValueChange={value => {\n                            setPulseWidth(value);\n                            if (value % PULSE_WIDTH_STEP === 0) {\n                                onChange({ ...settings, pulseWidth: value })\n                            }\n                        }} />\n                </Label>\n            </FormGroup>\n        </StyledContainer>\n    )\n}\n\nDeviceConfiguration.propTypes = {\n    settings: PropTypes.shape({\n        ssid: PropTypes.string,\n        pulse: PropTypes.oneOf(['on', 'off']),\n        // TOOD: rest\n    }),\n    onChange: PropTypes.func,\n    deviceApi: PropTypes.object,\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Collapse, Elevation, H5, Switch, Icon, Intent, } from '@blueprintjs/core';\nimport styled from 'styled-components';\nimport DeviceApi from '../DeviceApi';\nimport DeviceConfiguration from './DeviceConfiguration';\n\nconst StyledCard = styled(Card)`\n    margin: 1em;\n`\n\nconst CardHeader = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    && > * {\n        margin-bottom: 0;\n    }\n`;\n\nconst CardHeaderGroup = styled(CardHeader)`\n    & > *:not(:first-child) {\n        margin-left: 10px;\n    }\n`;\n\nexport default function DeviceResult({ device }) {\n    const [ showSettings, setShowSettings ] = useState(false);\n    const [ settings, setSettings ] = useState({});\n    const deviceApi = new DeviceApi({ id: device.txt.id, addresses: device.addresses, port: device.port })\n    const loadSettings = () => {deviceApi.getInfo().then((data) => setSettings(data || {}))};\n    useEffect(loadSettings, [ device.txt.id, device.addresses, device.port ])\n\n    console.log('settings', settings);\n\n    const handleConfigChange = async ({ startup, pulse, pulseWidth } = {}) => {\n        console.log('changing settings', { startup, pulse, pulseWidth })\n        const saves = [];\n        if (startup !== settings.startup) {\n            saves.push(deviceApi.setPowerOnState(startup));\n        }\n        if (pulse !== settings.pulse || pulseWidth !== settings.pulseWidth) {\n            saves.push(deviceApi.setInching({ pulse, pulseWidth }));\n        }\n        setSettings({ ...settings, startup, pulse, pulseWidth });\n        await Promise.all(saves);\n        loadSettings();\n    }\n\n    return (\n        <StyledCard elevation={Elevation.ZERO}>\n            <CardHeader>\n                <CardHeaderGroup>\n                <H5>\n                    {device.name}\n                </H5>\n                <Switch disabled={!settings.switch}\n                        checked={settings.switch === 'on'}\n                        innerLabel=\"off\"\n                        innerLabelChecked=\"on\"\n                        onChange={async (e) => {\n                                await deviceApi.switch(e.target.checked)\n                                loadSettings();\n                            }} />\n                </CardHeaderGroup>\n                <Button minimal intent={showSettings ? Intent.PRIMARY : undefined} onClick={() => setShowSettings(!showSettings)}><Icon icon=\"cog\" /></Button>\n            </CardHeader>\n            <Collapse isOpen={showSettings}>\n                <DeviceConfiguration settings={settings} onChange={handleConfigChange} deviceApi={deviceApi} />\n            </Collapse>\n        </StyledCard>\n    )\n}\n\nDeviceResult.propTypes = {\n    device: PropTypes.shape({\n        name: PropTypes.string,\n        addresses: PropTypes.arrayOf(PropTypes.string),\n        port: PropTypes.number,\n        txt: {\n            id: PropTypes.string,\n        }\n    })\n};\n","import React, { Component } from 'react';\nimport { Alignment, Navbar, NonIdealState } from '@blueprintjs/core';\nimport './App.css';\nimport { channels } from '../electron/constants';\nimport DeviceResult from './components/DeviceResult';\nconst { ipcRenderer } = window;\n\nclass App extends Component {\n\n  state = {\n    appName: '',\n    appVersion: '',\n    nodeVersion: '',\n    chromeVersion: '',\n    electronVersion: '',\n    devices: {}\n  }\n\n  componentDidMount() {\n    ipcRenderer.once(channels.APP_INFO, (event, arg) => {\n      const { appName, appVersion, nodeVersion, chromeVersion, electronVersion } = arg;\n      this.setState({ appName, appVersion, nodeVersion, chromeVersion, electronVersion });\n    });\n    ipcRenderer.send(channels.APP_INFO);\n\n    ipcRenderer.on(channels.DEVICE_RESPONSE, (event, device) => {\n      if (JSON.stringify(device) !== JSON.stringify(this.state.devices[device.fqdn])) {\n        this.setState({ devices: {...this.state.devices, [device.fqdn]: device} });\n      }\n    });\n    ipcRenderer.send(channels.SCAN_DEVICES);\n  }\n\n  render() {\n    const { appName, appVersion } = this.state;\n    const devices = Object.values(this.state.devices);\n    return (\n      <div>\n        <Navbar>\n          <Navbar.Group align={Alignment.LEFT}>\n            <Navbar.Heading>{appName} <small>v{appVersion}</small></Navbar.Heading>\n          </Navbar.Group>\n          <Navbar.Group align={Alignment.RIGHT}>\n            {/* <Button icon={'flash' || 'moon'} minimal /> */}\n          </Navbar.Group>\n        </Navbar>\n        <div>\n          {devices && devices.length > 0 ? devices.map(device => (\n            <DeviceResult key={`device-result-${device.fqdn}`} device={device} />\n          )) : (\n            <NonIdealState icon=\"offline\"\n                           title=\"No devices found\"\n                           description=\"Could not find any devices on your network. Please ensure they are on and connected to the same wifi as your computer.\"\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './react/App';\nimport 'normalize.css/normalize.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = {\n    channels: {\n      APP_INFO: 'app_info',\n      SCAN_DEVICES: 'scan_devices',\n      DEVICE_RESPONSE: 'device_response',\n      DEVICE_API: 'device_api',\n      DEVICE_API_ERROR: 'device_api_error',\n    },\n  };\n\n"],"sourceRoot":""}